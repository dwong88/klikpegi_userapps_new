{"version":3,"sources":["../../.tmp/components/timer.ts"],"names":[],"mappings":"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","file":"timer.js","sourceRoot":"","sourcesContent":["import { Injectable } from \"@angular/core\";\r\n\r\n\r\nexport class Timer {\r\n    private fns: any[] = [];\r\n    private commands: Function[] = [];\r\n    private nextTime: number;\r\n    private ing: boolean = false;\r\n\r\n    start() {\r\n        if (this.ing === true) return;\r\n\r\n        this.ing = true;\r\n        this.nextTime = +new Date();\r\n        this.process();\r\n    }\r\n\r\n    private process() {\r\n        while (this.commands.length) {\r\n            this.commands.shift()();\r\n        }\r\n        let diff = +new Date() - this.nextTime,\r\n            count = 1 + Math.floor(diff / 100);\r\n\r\n        diff = 100 - diff % 100;\r\n        this.nextTime += 100 * count;\r\n\r\n        let frequency: number, step: number, i: number, len: number;\r\n        for (i = 0, len = this.fns.length; i < len; i += 2) {\r\n            frequency = this.fns[i + 1];\r\n\r\n            // 100/s\r\n            if (0 === frequency) {\r\n                this.fns[i](count);\r\n                // 1000/s\r\n            } else {\r\n                // 先把末位至0，再每次加2\r\n                frequency += 2 * count - 1;\r\n\r\n                step = Math.floor(frequency / 20);\r\n                if (step > 0) { \r\n                    this.fns[i](step); \r\n                }\r\n\r\n                // 把末位还原成1\r\n                this.fns[i + 1] = frequency % 20 + 1;\r\n            }\r\n        }\r\n\r\n        if (this.ing)\r\n            setTimeout(() => { this.process(); }, diff);\r\n    }\r\n\r\n    add(fn: Function, frequency: number) {\r\n        this.commands.push(() => {\r\n            this.fns.push(fn);\r\n            this.fns.push(frequency === 1000 ? 1 : 0);\r\n            this.ing = this.fns.length > 0;\r\n        });\r\n    }\r\n\r\n    remove(fn: Function) {\r\n        this.commands.push(() => {\r\n            const i = this.fns.indexOf(fn);\r\n            if (i !== -1) {\r\n                this.fns.splice(i, 2);\r\n            }\r\n            this.ing = this.fns.length > 0;\r\n        });\r\n    }\r\nstatic decorators: DecoratorInvocation[] = [\n{ type: Injectable },\n];\n/** @nocollapse */\nstatic ctorParameters: () => ({type: any, decorators?: DecoratorInvocation[]}|null)[] = () => [\n];\n}\r\n\ninterface DecoratorInvocation {\n  type: Function;\n  args?: any[];\n}\n"]}